@page "/Ledger/{Id}"
@using BB.Web.Domain
@using BB.Web.Domain.Actuals
@using Marten
@using Marten.Events.Daemon.Coordination
@inject IDocumentSession session
@inject IProjectionCoordinator coordinator
@rendermode InteractiveServer

<PageTitle>Current Ledger</PageTitle>

<h1>Current Ledger</h1>

@if (ledger == null)
{
<p><em>Loading...</em></p>
}
else
{
<div>
    Total: @ledger.Balance
</div>
<table class="table">
    <thead>
    <tr>
        <th>Date</th>
        <th>Category</th>
        <th>Amount</th>
    </tr>
    </thead>
    <tbody>
    @foreach (var transaction in transactions)
    {
    <tr>
        <td>@transaction.Date.ToString("O")</td>
        <td>@transaction.Category</td>
        <td>@transaction.Amount</td>
    </tr>
    }
    </tbody>
</table>
}

<button class="btn btn-primary" @onclick="Create">Add new</button>
<br/>
<button class="btn btn-primary" @onclick="Rebuild">Rebuild</button>

@code {
    [Parameter]
    public string Id { get; set; }
    private Ledger? ledger;
    private IList<Transaction> transactions => ledger?.Transactions ?? [];

    protected override async Task OnInitializedAsync()
    {
        ledger = await session.LoadAsync<Ledger>(Id);
    }

    private async Task Create()
    {
        var today = DateOnly.FromDateTime(DateTime.Now);

        var posted = new TransactionPosted(today, new Money(30), Category.Create("Testing"), string.Empty);

        session.Events.Append(today.ToString("O"), posted);

        await session.SaveChangesAsync();
        ledger = await session.LoadAsync<Ledger>(Id);
    }

    private async Task Rebuild()
    {
        var daemon = coordinator.DaemonForMainDatabase();
        await daemon.RebuildProjectionAsync(typeof(LedgerProjection), default);
        ledger = await session.LoadAsync<Ledger>(Id);
    }

}
