@page "/budgets"
@using BB.Web.Domain
@using BB.Web.Domain.Actuals
@using Marten
@inject IDocumentStore Store
@rendermode InteractiveServer

<PageTitle>Budgets</PageTitle>

<h1>Budgets</h1>

@if (budgets == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Id</th>
                <th>Span</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var budget in budgets)
            {
                <tr>
                    <td>@budget.Id</td>
                    <td>@budget.Span</td>
                    <td><button class="btn btn-outline-danger" @onclick="() => Delete(budget)">Remove</button></td>
                </tr>
            }
        </tbody>
    </table>
}

<button class="btn btn-primary" @onclick="Create">Add new</button>

@code {
    private IList<Domain.Budgets.Budget>? budgets = [];

    protected override async Task OnInitializedAsync()
    {
        await using var session = Store.QuerySession();
        budgets = (await session.Query<Domain.Budgets.Budget>().ToListAsync()).ToList();
    }

    private async Task Delete(Domain.Budgets.Budget budget)
    {
        await using var session = Store.LightweightSession();

        session.Delete(budget);

        await session.SaveChangesAsync();

        budgets!.Remove(budget);
    }

    private async Task Create()
    {
        await using var session = Store.LightweightSession();
        var today = DateOnly.FromDateTime(DateTime.Now);

        var budget = new Domain.Budgets.Budget
        {
            Span = new(today, today.AddDays(10)),
        };

        session.Store(budget);

        var first = DateOnly.FromDateTime(DateTime.Now.AddDays(-3));
        var last = first.AddDays(7);
        session.Events.Append(today.ToString("O"), new LedgerCreated(Category.All, new DateSpan(first, last)));

        await session.SaveChangesAsync();
        
        budgets!.Add(budget);
    }
}
